{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","index","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAdF,SAACC,GAAS,IAEZC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,gCACI,6BAAKF,IACL,4BAAIC,WCaLK,EApBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEf,OACI,8BAGQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAQ,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,OAHhBM,EAAOG,GAAOR,UCKhCS,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,EATA,SAAClB,GACZ,OACI,qBAAKmB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAAnE,SACKtB,EAAMuB,YCoBJC,E,kDArBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAQ,CACTC,UAAS,GAHC,E,qDASlB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAAEJ,UAAS,M,oBAG7B,WACI,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAK7B,MAAMuB,a,GAnBGQ,aCuDdC,G,wDAhDX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,SAfzC,EAAKX,MAAQ,CACTjB,OAAQ,GACRK,YAAY,IALP,E,qDAUb,WAAoB,IAAD,OACfwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEtB,OAAOiC,S,oBAU3C,WAAS,IAAD,EAE4BZ,KAAKJ,MAA7BjB,EAFJ,EAEIA,OAAQK,EAFZ,EAEYA,YACV6B,EAAiBlC,EAAOmC,QAAQ,SAAAC,GAClC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASjC,EAAYgC,kBAEzD,OAAQrC,EAAOuC,OAIX,sBAAK3C,UAAU,KAAf,UAEI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQkC,WARlC,6C,GAhCUX,cCIHiB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.d47695ea.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) =>{\n    // can add the destructuring to the parameters\n    const {name,email,id} = props;\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots})=>{\n    \n    return (\n        <div>\n            {\n                // Key should have something that does not change, so a good key is like id\n                robots.map((user,index) =>{\n                    return (<Card \n                            key={robots[index].id} \n                            id={robots[index].id} \n                            name={robots[index].name} \n                            email={robots[index].email}\n                            />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) =>{\n    return (\n        <div className=\"pa2\">\n            <input \n                className='pa3 ba b--green bg-lightest-blue' \n                type='search'\n                placeholder='Search robots'\n                onChange={searchChange}\n            />\n        </div>\n        \n    );\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n    \n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass  ErrorBoundary extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            hasError:false\n        }\n\n    }\n\n    // New lifecycle hood\n    componentDidCatch(error,info){\n        this.setState({ hasError:true })\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from \"react\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\n\nclass App extends Component{\n    constructor(){\n        super()\n        // Can change and affect the app\n        this.state = {\n            robots: [],\n            searchField:''\n        }\n    }\n\n    // Its part of react so no need for lamba func\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => {this.setState({ robots:users })} );\n    }\n\n    // Random name we create\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n        \n        //console.log(filteredRobots);\n    }\n\n    render(){\n\n        const { robots, searchField } = this.state; // Destructuring\n        const filteredRobots = robots.filter( robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return !robots.length ? // 0 is false in JS\n        // Loading bar\n        <h1>Loading</h1> :\n        (\n            <div className='tc'>\n\n                <h1 className=\"f1\">RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; // React bot\nimport ReactDOM from 'react-dom'; // DOM (can be React native)\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}